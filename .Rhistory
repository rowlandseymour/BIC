getwd()
setwd("~/OneDrive - University of Birmingham/PBLA/")
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
setwd("code/")
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
sourceCpp('lh_foropt.cpp')
library(RcppGSL)
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
install.Rtools(check = T)
install.packages("Rtools")
set.seed(12345)
# Load in the data and define necessary quantities
data<-read.table("data_rd.txt") # removal data
n_c<-read.table("n_c.txt") # number of cows
n_s<-read.table("n_s.txt") # number of sheep
# Load in the data and define necessary quantities
data<-read.table("../data/data_rd.txt") # removal data
n_c<-read.table("../data/n_c.txt") # number of cows
n_s<-read.table("../data/n_s.txt") # number of sheep
xc<-read.table("../data/x_coord_rd.txt") # x co-ordinate of farm
getwd()
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
sourceCpp('lh_foropt.cpp')
library(devtools)
find_rtools()
unlink("~/.R/Makevars")
unlink("~/.Renviron")
install.packages(c('Rcpp', 'RcppArmadillo'))
install.packages(c("Rcpp", "RcppArmadillo"))
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
# set seed if you wish
set.seed(12345)
print("Read in the data...")
# Load in the data and define necessary quantities
data<-read.table("data_rd.txt") # removal data
n_c<-read.table("n_c.txt") # number of cows
# ED negative log posterior, for gamma infectious periods (since NLM minimises)
post_o_min<-function(theta,  m=4, N, data, n_c, n_s, xc, yc, pmat, K = 1000, init.value = -10){
# k = number of trapezia, init.value = lower limit of numerical integrals, m= shape parameter of gamma distribution
# removal times
r<-data[,2]
nI <- length(r)
# parameters to be estimated
g<-theta[2]
v<-theta[3]
ep<-theta[4]
xi<-theta[5]
ze<-theta[6]
b<-matrix(NA, N, N)
b<-theta[1]*(v/(pmat +v^2))
b<-b*(ep*((n_c)^ze) + (n_s)^ze)
b<-t(t(b)*(xi*((n_c)^ze) + (n_s)^ze))
# begin log likelihood calculation:
if (any(theta<0)){ # need non-negative parameter values
return(10000000.00)
}
#contribution from infectives
lhc <- 0
for (k in 2:length(r)){
x <- seq(init.value, max(r), length.out=K)
sumC <- rep(0,K)
for (i in 1:length(x)){
sumM<-0
for (l in 0:(m-1)){
sumM <- sumM + (1/factorial(l))*(m-l)*(g*(r-pmin(x[i],r)))[-k]^l
}
sumC[i] <- sum((b[1:length(r),k]*exp(-g*(r-pmin(x[i],r))))[-k]*(sumM)) # use pmin instead of min for element by element min
}
y <- rep(0,K)
for (j in 1:length(r)){
if (j!=k){
choose.index <- which(x < min(r[k], r[j])) # integral limit
sumM2<-0
for (l in 0:(m-1)){
sumM2 <- sumM2 + ((r[j] - x[choose.index])^l)*(g^l)/factorial(l)
}
y[choose.index ]<- y[choose.index] + exp(-g*(r[j]+r[k]) + 2*g*x[choose.index] - (1/g)*sumC[choose.index])*b[j,k]*
((r[k]-x[choose.index])^(m-1))*(sumM2)
}
}
lhc <- lhc + log(g^m) - log(factorial(m-1)) + log(trapz(x,y))
}
#contribution from non-infectives
nilhc <- -(m/g)*sum(b[1:nI,(nI+1):N])
#overall (negative log) posterior
loglh <- lhc + nilhc
loglh <- loglh + log(pgamma(theta[1], shape=0.001, scale = 1/0.001)) +
log(pgamma(g, shape=0.001, scale = 1/0.001)) +
log(pgamma(v, shape=1.0, scale = 1/0.1)) +
log(pgamma(ep, shape=1.0, scale = 1/0.001)) +
log(pgamma(xi, shape=1.0, scale = 1/0.001)) +
log(pgamma(ze, shape=1.0, scale = 1/0.001))
return(-loglh)
}
Rcpp::sourceCpp(`helloworld.cpp')
``
`
Rcpp::sourceCpp('helloworld.cpp')
Rcpp::sourceCpp('helloworld.cpp')
Rcpp::sourceCpp(`helloworld.cpp')
`
``
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
sourceCpp('lh_foropt.cpp')
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
sourceCpp('lh_foropt.cpp')
# To improve computation time, we use Rcpp and the likelihood/posterior coded in C
sourceCpp('lh_foropt_post.cpp')
mu <- seq(0.01, 10, 0.01) #grid of mean values
likelihood <- dlnorm(y, mu, 0.01)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
y <- c(0.34, 0.47, 0.58, 0.27, 0.74, 0.44, 0.46, 0.65, 0.36, 0.55, 0.58, 0.55,
0.53, 0.56, 0.54, 0.61, 0.43, 0.52, 0.45, 0.49, 0.32, 0.33, 0.47, 0.58,
0.34, 0.60, 0.59, 0.43, 0.57, 0.34)
hist(y, main = "", xlab = "Reaction time (ms)")
mean(y)
mu <- seq(0.01, 10, 0.01) #grid of mean values
likelihood <- dlnorm(y, mu, 0.01)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
likelihood
hist(rlnorm(100, 5, 2))
hist(rlnorm(100, 0.1, 2))
hist(rlnorm(100, 0.1, 1))
hist(rlnorm(100, 3, 1))
hist(rlnorm(100, 2, 1))
hist(rlnorm(1000, 2, 1))
hist(rlnorm(1000, 2, 1))
hist(rlnorm(1000, 2, 1))
hist(rlnorm(1000, 2, 1))
hist(rlnorm(1000, 2, 0.5))
exp(2)
rlnorm(30, 2, 0.5)
round(rlnorm(30, 2, 0.5), 2)
y <- c(5.73, 30.67,  4.06,  4.97,  3.18,  4.75, 11.21,  4.94,  5.55,  5.87,
7.72, 13.41,  6.55,  3.26,  8.27,  6.50,  6.22, 4.52,  4.96,  7.76,
11.50, 14.58, 11.26,  8.49,  5.87,  2.96,  8.90,  7.38 ,10.84, 14.30)
hist(y, main = "", xlab = "Reaction time (ms)")
mean(y)
mu <- seq(0.01, 10, 0.01) #grid of mean values
likelihood <- dlnorm(y, mu, 0.01)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood", type = 'l')
likelihood <- dlnorm(y, mu, 0.5)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood", type = 'l')
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
y <- c(5.73, 30.67,  4.06,  4.97,  3.18,  4.75, 11.21,  4.94,  5.55,  5.87,
7.72, 13.41,  6.55,  3.26,  8.27,  6.50,  6.22, 4.52,  4.96,  7.76,
11.50, 14.58, 11.26,  8.49,  5.87,  2.96,  8.90,  7.38 ,10.84, 14.30)
hist(y, main = "", xlab = "Reaction time (ms)")
mean(y)
mu <- seq(0.01, 10, 0.01) #grid of mean values
likelihood <- dlnorm(y, mu, 0.5)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
mu <- seq(0.1, 10, 0.01) #grid of mean values
likelihood <- dlnorm(y, mu, 0.5)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
mu <- seq(0.01, 10, 0.1) #grid of mean values
likelihood <- dlnorm(y, mu, 0.5)
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
?dlnorm
hist(rchisq(1000, 3))
round(rchisq(20, 3))
round(rchisq(20, 3), 2)
rpois(50, 4)
hist(y, main = "", xlab = "Goals scored")
y <- c(2, 6, 2, 3, 4, 3, 4, 3, 1, 2, 3, 2, 6, 6, 2, 3, 5, 1, 2, 2, 4, 2, 5, 3,
6, 4, 1, 2, 7, 8, 4, 3, 7, 3, 3, 5, 2, 6, 1, 3, 7, 4, 2, 6, 8, 8, 4, 5,
7, 4)
hist(y, main = "", xlab = "Goals scored")
mean(y)
y <- c(99, 94, 76, 69, 62, 61, 60, 57, 52, 50, 48, 44, 43, 42, 38, 34, 34, 23)
hist(y)
y <- c(2, 6, 2, 3, 4, 3, 4, 3, 1, 2, 3, 2, 6, 6, 2, 3, 5, 1, 2, 2, 4, 2, 5, 3,
6, 4, 1, 2, 7, 8, 4, 3, 7, 3, 3, 5, 2, 6, 1, 3, 7, 4, 2, 6, 8, 8, 4, 5,
7, 4)
hist(y, main = "", xlab = "Goals scored")
mean(y)
likelihood <- dpois(lambda, y)
lambda <- seq(0.01, 10, 0.1) #grid of mean values
likelihood <- dpois(lambda, y)
lambda <- seq(0.01, 10, 0.1) #grid of mean values
likelihood <- function(lambda, y) prod(dpois(lambda, y))
loglikelihood <- function(lambda, y) sum(dpois(lambda, y, log = TRUE))
plot(mu, likelihood, xlab = expression(mu), ylab = "likelihood")
plot(mu, apply(likelihood, lambda, 2, y), xlab = expression(mu), ylab = "likelihood")
plot(mu, apply(likelihood, lambda, y), xlab = expression(mu), ylab = "likelihood")
?apply
plot(mu, apply(lambda, 2, likelihood, y), xlab = expression(mu), ylab = "likelihood")
plot(mu, apply(lambda, 1, likelihood, y), xlab = expression(mu), ylab = "likelihood")
plot(mu, lapply(lambda, 1, likelihood, y), xlab = expression(mu), ylab = "likelihood")
plot(mu, sapply(lambda, 1, likelihood, y), xlab = expression(mu), ylab = "likelihood")
plot(mu, sapply(lambda,  likelihood, y), xlab = expression(mu), ylab = "likelihood")
sapply(lambda,  likelihood, y)
lapply(lambda,  likelihood, y)
?sapply
plot(mu, sapply(lambda,  likelihood, y = y), xlab = expression(mu), ylab = "likelihood")
plot(mu, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "likelihood")
sapply(lambda,  loglikelihood, y = y)
sum(dpois(5, y, log = TRUE))
lambda <- seq(0, 10, 0.1) #grid of mean values
likelihood <- function(lambda, y) prod(dpois(lambda, y))
loglikelihood <- function(lambda, y) sum(dpois(lambda, y, log = TRUE))
sum(dpois(5, y, log = TRUE))
plot(mu, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "likelihood")
sapply(lambda,  loglikelihood, y = y)
lambda <- 1:20
likelihood <- function(lambda, y) prod(dpois(lambda, y))
loglikelihood <- function(lambda, y) sum(dpois(lambda, y, log = TRUE))
plot(mu, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "likelihood")
plot(lambda, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "likelihood")
plot(lambda, sapply(lambda,  likelihood, y = y), xlab = expression(mu), ylab = "likelihood")
mean(y)
lambda <- seq(0, 10, 0.01)
likelihood <- function(lambda, y) prod(dpois(lambda, y))
loglikelihood <- function(lambda, y) sum(dpois(lambda, y, log = TRUE))
plot(lambda, sapply(lambda,  likelihood, y = y), xlab = expression(mu), ylab = "likelihood")
plot(lambda, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "loglikelihood")
?dpois
lambda <- seq(0, 10, 0.01)
likelihood <- function(lambda, y) prod(dpois(y, lambda))
loglikelihood <- function(lambda, y) sum(dpois(y, lambda, log = TRUE))
plot(lambda, sapply(lambda,  likelihood, y = y), xlab = expression(mu), ylab = "likelihood")
plot(lambda, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "loglikelihood")
plot(lambda, sapply(lambda,  likelihood, y = y), xlab = expression(mu), ylab = "likelihood")
plot(lambda, sapply(lambda,  loglikelihood, y = y), xlab = expression(mu), ylab = "loglikelihood", type = 'l')
x <- seq(0, 5, 0.01)
y <- dnorm(0, 1)
plot(x, y, type = 'l')
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
x <- seq(0, 4, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
x <- seq(0, 3, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
max(y)
y <- dnorm(x, 0, 0.3)
plot(x, y, type = 'l')
N <- 5
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
N <- 5
y.max <- max(y)
x <- seq(0, 10, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
N <- 5
y.max <- max(y)
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
N <- 5
y.max <- max(y)
# Finding A and x[0]~x[N-1], y[0]~y[N-1]
# using the standard norm
dnorminv<-function(y) sqrt(-2*log(sqrt(2*pi)*y))
findAxy <- function (N) {
x1 <- numeric (N)
y1 <- numeric (N)
flag1 = 0
A1 = 0
xcap = 5
xflo = 0
xcur = (xcap+xflo)/2
flag1= findyN(N,xcur) [[1]]
while (flag1 !=1) {
if (flag1 == 100) {
xflo = xcur
} else if (flag1 == -100)  {
xcap = xcur
}
xcur = (xcap+xflo)/2
flag1= findyN(N,xcur) [[1]]
}
A1= round(findyN(N,xcur) [[2]],digits = 6)
x1 = round(findyN(N,xcur) [[3]],digits = 6)
y1 = round(findyN(N,xcur) [[4]],digits = 6)
list (A = A1 , x = x1 , y = y1)
}
findyN <- function (N,xinit) {
x <- numeric (N)
y <- numeric (N)
flag = 0
x[1] <- xinit
tail <- 1-pnorm(x[1])
y[1] <- dnorm(x[1])
A <- x[1] * y[1] + tail
x[2]= x[1]
y[2] = y[1]+A/x[2]
for (i in 2:N-1) {
if ((y[i] > dnorm(0))) {
flag = -1
break
}
x[i+1] = dnorminv(y[i])
y[i+1] = y[i] + A/x[i]
}
if (flag == -1) {flag = 100}
else if(abs(y[N] - dnorm(0))<=1e-6) {
flag =1   #FOUND
} else if (y[N] > dnorm(0)) {
flag = 100
} else if (y[N] < dnorm(0)) {
flag = -100
}
return (list (flag,A,x,y))
}
#Genearating from standard normal
GenFromTail<-function(a) {
u1<-runif(1)
u2<-runif(1)
while (u2 > a*sqrt((a^2-2*log(u1)))){
u1<-runif(1)
u2<-runif(1)
}
x = sqrt((a^2-2*log(u1)))
return(x)
}
table <- findAxy(256)
#x[N+1] <- 0
xtable <-table$x
ytable <-table$y
Atable <-table$A
myziggurat <- function(total,N) {
x <- xtable
y <- ytable
A <- Atable
immediate = 0
rejection = 0
R0 <- x[1]*y[1]
data <- numeric(total)
signpn <- (2*rbinom(total,1,0.5)-1)
i = 1
while (i <= total) {
#index for rectangular
k <- sample(0:N-1,1)
u1<-runif(1)
if (k>0){
#generating from rectangular S[k]
xi<-u1*x[k]
if(xi<(x[k+1])){
#xi in R[k], accept
data[i] = signpn[i]*xi
immediate = immediate + 1
i = i+1
}else{
#generating yi
u2<-runif(1)
yi <- y[k]+u2*(y[k+1]-y[k])
if(yi <=  dnorm(xi)) {
data[i] = signpn[i]*xi
i = i + 1
} else{
rejection = rejection + 1
}
}
}
else{
#generating from S0
w<-runif(1,max = A)
if (w<= R0) {
data[i] = signpn[i]*w/y[1]
immediate = immediate + 1
i = i + 1
} else {
data[i] = signpn[i]*GenFromTail(x[1])
i = i+1
}
}
}
print(noquote(paste("rejection rate:",rejection/total)))
print(noquote(paste("immediate accept rate:",immediate/total)))
return(data)
}
zdata <- myziggurat(10000,256)
hist(zdata,breaks=1000, main = "Histagram of Ziggurat 10000 Sampling")
qqplot(zdata,rnorm(10000), main = "qq-plot of Ziggurat 10000 Sampling")
table <- findAxy(256)
table
table <- findAxy(6)
plot(x, y, type = 'l')
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[1:5])
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[1:5])
plot(x, y, type = 'l')
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[1:5])
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
plot(x, y, type = 'l')
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
plot(x, y, type = 'l')
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[1:5] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
N <- 5
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
table
table$x <- c(2.5, 2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0, 0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = 0, y1 = 2.5)
segments(x0 = table$x[1], x1 = 2.5, y0 = 0, y1 = 0)
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = 0, y1 = 0)
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = table$x[1], y0 = 0, y1 = 2.5])
segments(x0 = table$x[1], x1 = table$x[1], y0 = 0, y1 = 2.5)
plot(x, y, type = 'l', col = "blue")
plot(x, y, type = 'l', col = "blue", lwd = 3)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = 2.5)
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l', col = "blue", lwd = 3)
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
rm(list = ls())
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l', col = "blue", lwd = 3)
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table <- 0
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
rm(list = ls())
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l', col = "blue", lwd = 3)
table <- 0
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
?qecp
?qexp
qexp(0.025, 870)
qexp(0.025, 870.01)
qexp(0.975, 870.01)
