#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(sigma.sq.store, na.rm = TRUE)
quantile(sigma.sq.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 40
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((mean(x)-mean(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(sigma.sq.store, na.rm = TRUE)
quantile(sigma.sq.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 30
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((mean(x)-mean(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(sigma.sq.store, na.rm = TRUE)
quantile(sigma.sq.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 30
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((var(x)-var(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 300
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((var(x)-var(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
sum((var(x)-var(x.star))^2)
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 1e6
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((var(x)-var(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(sigma.sq.store, na.rm = TRUE)
quantile(sigma.sq.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 1e5
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((var(x)-var(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
sigma.sq.store <- numeric(n.iter)
epsilon <- 5e5
for(i in 1:n.iter){
sigma.sq <- rexp(1, 1)
x.star <- rnorm(20, 5, sqrt(sigma.sq))
d <- sum((var(x)-var(x.star))^2)
if(d < epsilon){
sigma.sq.store[i] <- sigma.sq
} else{
sigma.sq.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(sigma.sq.store))
#Plot Approximate Posterior
hist(sigma.sq.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(sigma.sq.store, na.rm = TRUE)
quantile(sigma.sq.store, c(0.025, 0.975), na.rm = TRUE)
x <- rexp(5, 2)
x
x <- rexp(5, 0.3)
x
x <- c(-5.93,  33.12, -21.41, -12.42, -17.64,  -5.47, -27.95, -22.25, -20.40, -26.28, -24.57, 3.06,  44.28, 6.02, -21.14,  14.79, -15.10, 53.18,  38.61,   5.71)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 30
for(i in 1:n.iter){
lambda <- rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- rexp(5, 0.3)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 30
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- rexp(5, 0.3)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 1
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- rexp(5, 0.3)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 3
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 5
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 10
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 20
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 50
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 60
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 70
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
abs.function <- function(epsilon){
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
output(mean(lambda.store))
}
mean(x)
1/mean(x)
abc.function <- function(epsilon){
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
output(mean(lambda.store))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 70
abc.function <- function(epsilon){
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
return(mean(lambda.store))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
plot(abc.lambda)
abc.lambda
abc.function(i)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
epsilon <- 70
abc.function <- function(epsilon){
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
return(mean(lambda.store))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
hist(lambda.store)
mean(lambda.store)
epsilon <- 70
abc.function <- function(epsilon){
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
return(mean(lambda.store, na.rm = TRUE))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
plot(abc.lambda)
plot((abc.lambda - 0.2)/0.2)
plot((abc.lambda - 0.2)/0.2*100)
for(i in 20:100){
abc.lambda[i-49] <- abc.function(i)
}
epsilon <- 20:100
abc.lambda <- numeric(length(epsilon))
for(i in 1:length(epsilon))
abc.lambda[i] <- abc.function(i)
plot((abc.lambda - 0.2)/0.2*100)
# Set Up ABC function -----------------------------------------------------
abc.function <- function(epsilon){
#input the value of epsilon
#Set Up ABC Algorithm
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
#Run ABC
for(i in 1:n.iter){
#Propose lambda
lambda <-rbeta(1, 1, 3)
#Simulate data
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
#Accept Reject
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Report median
return(median(lambda.store, na.rm = TRUE))
}
#Run for each value of epsilon
epsilon <- 20:100
abc.lambda <- numeric(length(epsilon))
for(i in 1:length(epsilon))
abc.lambda[i] <- abc.function(i)
#Report relative error
plot((abc.lambda - 0.2)/0.2*100)
#Report relative error
plot(epsilon, (abc.lambda - 0.2)/0.2*100, xlab = expression(epsilon), ylab = "Relative Error")
install.packages(mvtnomr)
install.packages(mvtnorm)
install.packages("mvtnorm")
