#Gamma
require(MAnorm2)
alpha.rho <- inv.trigamma(sigma.sq)
alpha.rho
beta.rho  <- exp(mu + digamma(alpha.rho))
beta.rho
curve(exp(-dgamma(x, alpha.rho, beta.rho)), 0, 1)
sigma.sq <- 0.1
alpha.rho <- inv.trigamma(sigma.sq)
beta.rho  <- exp(mu + digamma(alpha.rho))
curve(exp(-dgamma(x, alpha.rho, beta.rho)), 0, 1)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- -rgamma(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j %>% exp()
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
alpha.rho
beta.rho]
beta.rho
spatial.results <- matrix(0, ncol=3) %>% as.data.frame()
known.group.indices <- c(1, 2, 3)
unknown.group.indices <- setdiff(1:num.subpopulations, known.group.indices)
colnames(spatial.results) <- c('num_respondents', 'mean_error', 'model')
sim.num.respondents <- c(5, 10, 15, 20, 25, 40)
population <- 1000000
model <- stan_model('~/Desktop/corr_neg_binomial_partial_pooling.stan')
num.regions <- 150
num.respondents <- 20
cat(paste('Currently simulating with', num.respondents, 'respondents'), '\n')
ard <- matrix(0, ncol=num.subpopulations)
for(region in 1:num.regions){
# Generate NB data for multiple regions and estimate the prevalence
# using the NB model and correlated scaling
p.k <- as.numeric(all.p.k[region, ])
nb.ard <- generate.nb.ard(num.respondents = num.respondents,
num.subpopulations = length(p.k),
total.pop.size = population,
p.k = p.k)
ard <- rbind(ard, nb.ard)
}
ard <- ard[-1,]
ard
data <- list(N = nrow(ard),
K = ncol(ard),
y = ard,
offset = rep(population, nrow(ard)),
J = num.regions,
jj = rep(1:num.regions, each=num.respondents))
fit <- sampling(model, data = data, warmup=500,
iter = 1500, cores=20,
chains = 2, seed=73, verbose=F, show_messages=F)
traceplot(fit)
params <- extract(fit)
rho_j <- params$rho_j
rho_j
##Beta
mu <- 0.2
sigma.sq <- 0.01
alpha.rho <- mu*(mu*(1-mu)/sigma.sq - 1)
beta.rho  <- alpha.rho*(1-mu)/mu
curve(dbeta(x, alpha.rho, beta.rho), 0, 1)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- rbeta(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j %>% exp()
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- rbeta(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
spatial.results <- matrix(0, ncol=3) %>% as.data.frame()
known.group.indices <- c(1, 2, 3)
unknown.group.indices <- setdiff(1:num.subpopulations, known.group.indices)
colnames(spatial.results) <- c('num_respondents', 'mean_error', 'model')
sim.num.respondents <- c(5, 10, 15, 20, 25, 40)
population <- 1000000
num.regions <- 150
num.respondents <- 20
cat(paste('Currently simulating with', num.respondents, 'respondents'), '\n')
ard <- matrix(0, ncol=num.subpopulations)
for(region in 1:num.regions){
# Generate NB data for multiple regions and estimate the prevalence
# using the NB model and correlated scaling
p.k <- as.numeric(all.p.k[region, ])
nb.ard <- generate.nb.ard(num.respondents = num.respondents,
num.subpopulations = length(p.k),
total.pop.size = population,
p.k = p.k)
ard <- rbind(ard, nb.ard)
}
ard <- ard[-1,]
ard
colMeans(ard)
mu <- 0.1
sigma.sq <- 0.1
alpha.rho <- inv.trigamma(sigma.sq)
beta.rho  <- exp(mu + digamma(alpha.rho))
curve(exp(-dgamma(x, alpha.rho, beta.rho)), 0, 1)
mu <- 0.2
sigma.sq <- 0.01
alpha.rho <- mu*(mu*(1-mu)/sigma.sq - 1)
beta.rho  <- alpha.rho*(1-mu)/mu
curve(dbeta(x, alpha.rho, beta.rho), 0, 1)
mu <- 0.1
sigma.sq <- 0.01
alpha.rho <- mu*(mu*(1-mu)/sigma.sq - 1)
beta.rho  <- alpha.rho*(1-mu)/mu
curve(dbeta(x, alpha.rho, beta.rho), 0, 1)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- rbeta(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
spatial.results <- matrix(0, ncol=3) %>% as.data.frame()
known.group.indices <- c(1, 2, 3)
unknown.group.indices <- setdiff(1:num.subpopulations, known.group.indices)
colnames(spatial.results) <- c('num_respondents', 'mean_error', 'model')
sim.num.respondents <- c(5, 10, 15, 20, 25, 40)
population <- 1000000
num.regions <- 150
num.respondents <- 20
cat(paste('Currently simulating with', num.respondents, 'respondents'), '\n')
ard <- matrix(0, ncol=num.subpopulations)
for(region in 1:num.regions){
# Generate NB data for multiple regions and estimate the prevalence
# using the NB model and correlated scaling
p.k <- as.numeric(all.p.k[region, ])
nb.ard <- generate.nb.ard(num.respondents = num.respondents,
num.subpopulations = length(p.k),
total.pop.size = population,
p.k = p.k)
ard <- rbind(ard, nb.ard)
}
ard <- ard[-1,]
colMeans(ard)
mu <- 4
sigma.sq <- 2
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 10)
curve(exp(-dgamma(x, alpha.rho, beta.rho)), 0, 10)
curve(dgamma(x, alpha.rho, beta.rho), 0, 10)
mu <- 4
sigma.sq <- 2
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 10)
curve(-dgamma(x, alpha.rho, beta.rho), 0, 10)
curve(dgamma(x, alpha.rho, beta.rho), 0, 10)
mu <-  0.1
sigma.sq <- 0.1
alpha.rho <- inv.trigamma(sigma.sq)
beta.rho  <- exp(mu + digamma(alpha.rho))
curve(dgamma(x, alpha.rho, beta.rho), 0, 1)
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 1)
mu <-  0.1
sigma.sq <- 0.1
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 1)
mu <-  0.1
sigma.sq <- 0.01
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 1)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- -rgamma(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
all.p.k <- rho_j %>% exp()
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
mu <-  4
sigma.sq <- 2
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 1)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- -rgamma(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j %>% exp()
all.p.k <- rho_j %>% exp()
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
require(MAnorm2)
mu <-  2
sigma.sq <- 1
alpha.rho <- (mu**2)/sigma.sq
beta.rho <- mu/sigma.sq
curve(dgamma(x, alpha.rho, beta.rho), 0, 1)
num.regions <- 150
rho_j <- matrix(0, ncol=num.subpopulations, nrow=num.regions)
for(region in 1:num.regions){
rho_j[region,]  <- -rgamma(num.subpopulations, alpha.rho, beta.rho) %>%
sort(decreasing = T) %>% pmax(-17)
}
all.p.k <- rho_j %>% exp()
colnames(all.p.k) <- paste0('subpopulation_', 1:num.subpopulations)
all.p.k %>% head(20)
curve(dgamma(x, alpha.rho, beta.rho), 0, 10)
spatial.results <- matrix(0, ncol=3) %>% as.data.frame()
known.group.indices <- c(1, 2, 3)
unknown.group.indices <- setdiff(1:num.subpopulations, known.group.indices)
colnames(spatial.results) <- c('num_respondents', 'mean_error', 'model')
sim.num.respondents <- c(5, 10, 15, 20, 25, 40)
population <- 1000000
model <- stan_model('~/Desktop/corr_neg_binomial_partial_pooling.stan')
install.packages("poLCA")
install.packages("polCA")
install.packages("poLCA")
library)poLCA
library(poLCA)
help(poLCA)
data(values)
values
f <- cbind(A,B,C,D)~1
f
M0 <- poLCA(f,values,nclass=1) # log-likelihood: -543.6498
data(carcinoma)
f <- cbind(A,B,C,D,E,F,G)~1
lc2 <- poLCA(f,carcinoma,nclass=2)
lc3 <- poLCA(f,carcinoma,nclass=3)
lc4 <- poLCA(f,carcinoma,nclass=4,maxiter=5000)
carcinoma
f <- cbind(A,B,C,D,E,F,G)~1
lc2 <- poLCA(f,carcinoma,nclass=2)
f
# importing required packages
library(readxl)
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
# print data frame
print(data_frame)
}
# specifying the path name
path <- "/Users/mallikagupta/Desktop/Gfg.xlsx"
# specifying the path name
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx
multiplesheets(path)
# specifying the path name
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
# specifying the path name
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
multiplesheets(path)
romance_fraud <- multiplesheets(path)
romance_fraud$`Victim Characteristics`
View(romance_fraud)
View(romance_fraud$`Victim Characteristics`)
romance_fraud[is.na(romance_fraud)] <- 0
View(romance_fraud$`Victim Characteristics`)
romance_fraud$`Victim Characteristics`[is.na(romance_fraud$`Victim Characteristics`)] <- 0
romance_fraud$`Victim Characteristics`
help(pairs)
# specifying the path name
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
romance_fraud <- multiplesheets(path)
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
# print data frame
return(data_frame)
}
# specifying the path name
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
romance_fraud <- multiplesheets(path)
romance_fraud[is.na(romance_fraud)] <- 0
romance_fraud$`Victim Characteristics`
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
# accessing all the sheets
sheet = excel_sheets("path")
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet),
function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
library(tidyverse)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
# installing the required libraries
library(readxl)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
library(dplyr)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
data_frame
View(data_frame)
data_frame[is.na(data_frame)] <- 0
data_frame[is.na(data_frame), ] <- 0
data_frame <- as.data.frame(data_frame)
data_frame[is.na(data_frame)] <- 0
data_frame[is.na(data_frame), ] <- 0
View(data_frame)
dim(data_frame)
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet),
function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
dim(data_frame)
# accessing all the sheets
sheet = excel_sheets(path)
sheet
temp <- read_excel(path, "Victim Characteristics")
dim(temp)
temp <- read_excel(path, "Suspect Characteristics")
dim(temp)
temp <- read_excel(path, "Victim Characteristics")
View(temp)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet),
function(x) read_excel(path, sheet=x))
dim(temp)
dim(data_frame)
data_frame
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
dim(data_frame)
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet),
function(x) read_excel(path, sheet=x))
dim(data_frame$`Victim Characteristics`)
dim(data_frame$`Suspect Characteristics`
)
dim(data_frame$Temporal)
dim(data_frame$`Initial Approach`
)
dim(data_frame$`Follow-On Contact`)
dim(data_frame$Maintenance
)
dim(data_frame$Extortion)
dim(data_frame$Closure)
?bind_rows
View(data_frame$`Victim Characteristics`)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id='Case Number')
dim(data_frame)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet),
function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
dim(data_frame)
dim(data_frame)
dim(data_frame$Sheet)
# accessing all the sheets
sheet = excel_sheets(path)
dim(sheet)
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
# accessing all the sheets
sheet = excel_sheets(path)
sheet
setNames(sheet, sheet)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet), function(x) read_excel(path, sheet=x))
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
dim(data_frame$Extortion)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="sheet")
dim(data_frame)
# accessing all the sheets
sheet = excel_sheets(path)
dim(sheet)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
lapply(data_frame, dim)
# attaching all dataframes together
data_frame = bind_rows(data_frame) #, .id="Sheet")
dim(data_frame)
tail(data_frame)
View(data_frame)
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/Romance Fraud Checklist JW 31_08_23.xlsx"
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame) #, .id="Sheet")
dim(data_frame)
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/romance_fraud.xlsx"
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame) #, .id="Sheet")
dim(data_frame)
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/romance_fraud.xlsx"
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame) #, .id="Sheet")
dim(data_frame)
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
dim(data_frame)
# specifying the path for file
path <- "~/OneDrive - University of Birmingham/Romance Fraud/romance_fraud.xlsx"
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame, .id="Sheet")
dim(data_frame)
View(data_frame)
# attaching all dataframes together
data_frame = bind_rows(data_frame)#, .id="Sheet")
dim(data_frame)
View(data_frame)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
# attaching all dataframes together
data_frame = bind_rows(data_frame)#, .id="Sheet")
dim(data_frame)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
data_frame$`Victim Characteristics`
dim(data_frame$`Victim Characteristics`)
# accessing all the sheets
sheet = excel_sheets(path)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
dim(data_frame$`Victim Characteristics`)
romance_fraud <- data_frame$`Victim Characteristics`
data_frame <- as.data.frame(data_frame)
data_frame[is.na(data_frame), ] <- 0
romance_fraud <- data_frame$`Victim Characteristics`
data_frame[is.na(data_frame)] <- 0
View(data_frame)
romance_fraud[is.na(data_frame)] <- 0
View(romance_fraud)
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
romance_fraud <- data_frame$`Victim Characteristics`
romance_fraud[is.na(romance_fraud)] <- 0
romance_fraud[is.na(romance_fraud)] <- 0
romance_fraud <- as.data.frame(romance_fraud)
romance_fraud[is.na(romance_fraud)] <- 0
romance_fraud
romance_fraud[is.na(romance_fraud), ] <- 0
# applying sheet names to dataframe names
data_frame = lapply(setNames(sheet, sheet), function(x) read_excel(path, sheet=x))
romance_fraud <- data_frame$`Victim Characteristics`
romance_fraud <- data.frame(romance_fraud)
romance_fraud[is.na(romance_fraud), ] <- 0
romance_fraud[is.na(romance_fraud)] <- 0
View(romance_fraud)
table(romance_fraud$Age.at.Offence)
table(romance_fraud$Repeat.Victim)
table(romance_fraud$Religion...7)
table(romance_fraud$Mutual.Friends)
