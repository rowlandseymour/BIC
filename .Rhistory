y1 <- numeric (N)
flag1 = 0
A1 = 0
xcap = 5
xflo = 0
xcur = (xcap+xflo)/2
flag1= findyN(N,xcur) [[1]]
while (flag1 !=1) {
if (flag1 == 100) {
xflo = xcur
} else if (flag1 == -100)  {
xcap = xcur
}
xcur = (xcap+xflo)/2
flag1= findyN(N,xcur) [[1]]
}
A1= round(findyN(N,xcur) [[2]],digits = 6)
x1 = round(findyN(N,xcur) [[3]],digits = 6)
y1 = round(findyN(N,xcur) [[4]],digits = 6)
list (A = A1 , x = x1 , y = y1)
}
findyN <- function (N,xinit) {
x <- numeric (N)
y <- numeric (N)
flag = 0
x[1] <- xinit
tail <- 1-pnorm(x[1])
y[1] <- dnorm(x[1])
A <- x[1] * y[1] + tail
x[2]= x[1]
y[2] = y[1]+A/x[2]
for (i in 2:N-1) {
if ((y[i] > dnorm(0))) {
flag = -1
break
}
x[i+1] = dnorminv(y[i])
y[i+1] = y[i] + A/x[i]
}
if (flag == -1) {flag = 100}
else if(abs(y[N] - dnorm(0))<=1e-6) {
flag =1   #FOUND
} else if (y[N] > dnorm(0)) {
flag = 100
} else if (y[N] < dnorm(0)) {
flag = -100
}
return (list (flag,A,x,y))
}
#Genearating from standard normal
GenFromTail<-function(a) {
u1<-runif(1)
u2<-runif(1)
while (u2 > a*sqrt((a^2-2*log(u1)))){
u1<-runif(1)
u2<-runif(1)
}
x = sqrt((a^2-2*log(u1)))
return(x)
}
table <- findAxy(256)
#x[N+1] <- 0
xtable <-table$x
ytable <-table$y
Atable <-table$A
myziggurat <- function(total,N) {
x <- xtable
y <- ytable
A <- Atable
immediate = 0
rejection = 0
R0 <- x[1]*y[1]
data <- numeric(total)
signpn <- (2*rbinom(total,1,0.5)-1)
i = 1
while (i <= total) {
#index for rectangular
k <- sample(0:N-1,1)
u1<-runif(1)
if (k>0){
#generating from rectangular S[k]
xi<-u1*x[k]
if(xi<(x[k+1])){
#xi in R[k], accept
data[i] = signpn[i]*xi
immediate = immediate + 1
i = i+1
}else{
#generating yi
u2<-runif(1)
yi <- y[k]+u2*(y[k+1]-y[k])
if(yi <=  dnorm(xi)) {
data[i] = signpn[i]*xi
i = i + 1
} else{
rejection = rejection + 1
}
}
}
else{
#generating from S0
w<-runif(1,max = A)
if (w<= R0) {
data[i] = signpn[i]*w/y[1]
immediate = immediate + 1
i = i + 1
} else {
data[i] = signpn[i]*GenFromTail(x[1])
i = i+1
}
}
}
print(noquote(paste("rejection rate:",rejection/total)))
print(noquote(paste("immediate accept rate:",immediate/total)))
return(data)
}
zdata <- myziggurat(10000,256)
hist(zdata,breaks=1000, main = "Histagram of Ziggurat 10000 Sampling")
qqplot(zdata,rnorm(10000), main = "qq-plot of Ziggurat 10000 Sampling")
table <- findAxy(256)
table
table <- findAxy(6)
plot(x, y, type = 'l')
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[1:5])
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[1:5])
plot(x, y, type = 'l')
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[1:5])
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
plot(x, y, type = 'l')
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
plot(x, y, type = 'l')
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[1:5], x1 = table$x[1:5] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
N <- 5
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
table
table$x <- c(2.5, 2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0, 0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = 0, y1 = 2.5)
segments(x0 = table$x[1], x1 = 2.5, y0 = 0, y1 = 0)
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = 0, y1 = 0)
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l')
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = table$x[1], y0 = 0, y1 = 2.5])
segments(x0 = table$x[1], x1 = table$x[1], y0 = 0, y1 = 2.5)
plot(x, y, type = 'l', col = "blue")
plot(x, y, type = 'l', col = "blue", lwd = 3)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = 2.5)
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l', col = "blue", lwd = 3)
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
points(table$x, table$y)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
rm(list = ls())
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l', col = "blue", lwd = 3)
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table <- 0
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
rm(list = ls())
x <- seq(0, 5, 0.01)
y <- dnorm(x, 0, 1)
plot(x, y, type = 'l', col = "blue", lwd = 3)
table <- 0
table$x <- c(2.093446, 2.093446, 1.676493, 1.393368, 1.100918, 0.765337)
table$y <- c(0.044592, 0.097856, 0.151121, 0.217632, 0.297658, 0.398943)
segments(x0 = 0, x1 = table$x, y0= table$y, y1 = table$y)
segments(x0 = table$x[2:6], x1 = table$x[2:6] , y0= table$y[1:5], y1 = table$y[2:6])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = table$x[1], x1 = 2.5, y0 = table$y[1], y1 = table$y[1])
segments(x0 = 2.5, x1 = 2.5, y0 = 0, y1 = table$y[1])
?qecp
?qexp
qexp(0.025, 870)
qexp(0.025, 870.01)
qexp(0.975, 870.01)
library(strucchange)
install.packages("strucchange")
library(strucchange)
citation("strucchange")
?rbinom
git add -a
# Function to calculate the log-likelihood of the data given the parameters
likelihood <- function(data, mu, sigma) {
sum(dnorm(data, mean = mu, sd = sigma, log = TRUE))
}
# Function to calculate the prior distribution of the parameters
prior <- function(mu) {
dnorm(mu, mean = 0, sd = 10, log = TRUE)  # Assuming a normal prior with mean 0 and standard deviation 10
}
# Function to calculate the posterior distribution (proportional to likelihood * prior)
posterior <- function(data, mu, sigma) {
likelihood(data, mu, sigma) + prior(mu)
}
# Metropolis-Hastings Random Walk algorithm
metropolis_hastings <- function(data, iterations, initial_mu, proposal_sd) {
samples <- numeric(iterations)
current_mu <- initial_mu
for (i in 1:iterations) {
# Propose a new value for mu from a normal distribution
proposed_mu <- rnorm(1, mean = current_mu, sd = proposal_sd)
# Calculate the acceptance ratio
acceptance_ratio <- exp(posterior(data, proposed_mu, 1) - posterior(data, current_mu, 1))
# Accept or reject the proposed value
if (runif(1) < acceptance_ratio) {
current_mu <- proposed_mu
}
# Store the current value of mu in the samples
samples[i] <- current_mu
}
return(samples)
}
# Function to calculate the log-likelihood of the data given the parameters
likelihood <- function(data, mu, sigma) {
sum(dnorm(data, mean = mu, sd = sigma, log = TRUE))
}
# Function to calculate the prior distribution of the parameters
prior <- function(mu) {
dnorm(mu, mean = 0, sd = 10, log = TRUE)  # Assuming a normal prior with mean 0 and standard deviation 10
}
# Function to calculate the posterior distribution (proportional to likelihood * prior)
posterior <- function(data, mu, sigma) {
likelihood(data, mu, sigma) + prior(mu)
}
# Metropolis-Hastings Random Walk algorithm
metropolis_hastings <- function(data, iterations, initial_mu, proposal_sd) {
samples <- numeric(iterations)
current_mu <- initial_mu
for (i in 1:iterations) {
# Propose a new value for mu from a normal distribution
proposed_mu <- rnorm(1, mean = current_mu, sd = proposal_sd)
# Calculate the acceptance ratio
acceptance_ratio <- exp(posterior(data, proposed_mu, 1) - posterior(data, current_mu, 1))
# Accept or reject the proposed value
if (runif(1) < acceptance_ratio) {
current_mu <- proposed_mu
}
# Store the current value of mu in the samples
samples[i] <- current_mu
}
return(samples)
}
# Example usage:
set.seed(123)  # for reproducibility
data <- rnorm(100, mean = 5, sd = 2)  # Generate example data
iterations <- 10000
initial_mu <- 0
proposal_sd <- 0.5
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_mu, proposal_sd)
# Plot the posterior samples
hist(result, main = "Posterior Samples for Unknown Mean", xlab = "Mean (mu)")
plot(result, type = 'l')
# Example usage:
set.seed(123)  # for reproducibility
data <- rnorm(100, mean = 5, sd = 2)  # Generate example data
iterations <- 10000
initial_mu <- 0
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_mu, proposal_sd)
plot(result, type = 'l')
# Example usage:
set.seed(123)  # for reproducibility
data <- rnorm(100, mean = 5, sd = 2)  # Generate example data
iterations <- 10000
initial_mu <- -5
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_mu, proposal_sd)
plot(result, type = 'l')
# Example usage:
set.seed(123)  # for reproducibility
data <- rnorm(100, mean = 5, sd = 2)  # Generate example data
iterations <- 10000
initial_mu <- 20
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_mu, proposal_sd)
plot(result, type = 'l')
set.seed(123)  # for reproducibility
data <- rnorm(100, mean = 5, sd = 2)  # Generate example data
iterations <- 10000
initial_mu <- 20
proposal_sd <- 1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_mu, proposal_sd)
plot(result, type = 'l')
# Example usage:
set.seed(123)  # for reproducibility
data <- rnorm(100, mean = 5, sd = 2)  # Generate example data
iterations <- 10000
initial_mu <- 20
proposal_sd <- 0.01
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_mu, proposal_sd)
plot(result, type = 'l')
# Function to calculate the log-likelihood of the data given the parameters
likelihood <- function(data, shape, scale) {
sum(dgamma(data, shape = shape, scale = scale, log = TRUE))
}
# Function to calculate the prior distribution of the parameters
prior <- function(shape) {
dgamma(shape, shape = 2, scale = 1, log = TRUE)  # Assuming a gamma prior with shape 2 and scale 1
}
# Function to calculate the posterior distribution (proportional to likelihood * prior)
posterior <- function(data, shape, scale) {
likelihood(data, shape, scale) + prior(shape)
}
# Metropolis-Hastings Random Walk algorithm
metropolis_hastings <- function(data, iterations, initial_shape, proposal_sd) {
samples <- numeric(iterations)
current_shape <- initial_shape
for (i in 1:iterations) {
# Propose a new value for shape from a normal distribution
proposed_shape <- rnorm(1, mean = current_shape, sd = proposal_sd)
# Ensure the proposed shape is positive
proposed_shape <- max(0.1, proposed_shape)
# Calculate the acceptance ratio
acceptance_ratio <- exp(posterior(data, proposed_shape, 1) - posterior(data, current_shape, 1))
# Accept or reject the proposed value
if (runif(1) < acceptance_ratio) {
current_shape <- proposed_shape
}
# Store the current value of shape in the samples
samples[i] <- current_shape
}
return(samples)
}
# Example usage:
set.seed(123)  # for reproducibility
data <- rgamma(100, shape = 3, scale = 2)  # Generate example data
iterations <- 10000
initial_shape <- 1
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_shape, proposal_sd)
# Plot the posterior samples
hist(result, main = "Posterior Samples for Unknown Shape Parameter", xlab = "Shape Parameter (alpha)")
plot(result, type = 'l')
initial_shape <- 40
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_shape, proposal_sd)
plot(result, type = 'l')
initial_shape <- 10
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_shape, proposal_sd)
plot(result, type = 'l')
# Function to calculate the log-likelihood of the data given the parameters
likelihood <- function(data, shape, rate) {
sum(dgamma(data, shape = shape, rate = rate, log = TRUE))
}
# Function to calculate the prior distribution of the parameters
prior <- function(shape, rate) {
dgamma(shape, shape = 2, rate = 1, log = TRUE) + dgamma(rate, shape = 2, rate = 1, log = TRUE)
# Assuming gamma priors for both shape and rate parameters
}
# Function to calculate the posterior distribution (proportional to likelihood * prior)
posterior <- function(data, shape, rate) {
likelihood(data, shape, rate) + prior(shape, rate)
}
# Metropolis-Hastings Random Walk algorithm
metropolis_hastings <- function(data, iterations, initial_shape, initial_rate, proposal_sd) {
samples_shape <- numeric(iterations)
samples_rate <- numeric(iterations)
current_shape <- initial_shape
current_rate <- initial_rate
for (i in 1:iterations) {
# Propose new values for shape and rate from normal distributions
proposed_shape <- rnorm(1, mean = current_shape, sd = proposal_sd)
proposed_rate <- rnorm(1, mean = current_rate, sd = proposal_sd)
# Ensure the proposed values are positive
proposed_shape <- max(0.1, proposed_shape)
proposed_rate <- max(0.1, proposed_rate)
# Calculate the acceptance ratio
acceptance_ratio <- exp(posterior(data, proposed_shape, proposed_rate) - posterior(data, current_shape, current_rate))
# Accept or reject the proposed values
if (runif(1) < acceptance_ratio) {
current_shape <- proposed_shape
current_rate <- proposed_rate
}
# Store the current values of shape and rate in the samples
samples_shape[i] <- current_shape
samples_rate[i] <- current_rate
}
return(list(shape = samples_shape, rate = samples_rate))
}
# Example usage:
set.seed(123)  # for reproducibility
data <- rgamma(100, shape = 3, rate = 2)  # Generate example data
iterations <- 10000
initial_shape <- 1
initial_rate <- 1
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_shape, initial_rate, proposal_sd)
# Plot the posterior samples for shape and rate
par(mfrow = c(1, 2))
hist(result$shape, main = "Posterior Samples for Shape Parameter", xlab = "Shape Parameter (alpha)")
hist(result$rate, main = "Posterior Samples for Rate Parameter", xlab = "Rate Parameter (beta)")
plot(result$shape, type = 'l')
iterations <- 100000
initial_shape <- 8
initial_rate <- 1
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_shape, initial_rate, proposal_sd)
plot(result$shape, type = 'l')
plot(result$shape[1:10000], type = 'l')
plot(result$shape[1:5000], type = 'l')
plot(result$shape[1:8000], type = 'l')
initial_shape <- 10
initial_rate <- 1
proposal_sd <- 0.1
# Run Metropolis-Hastings algorithm
result <- metropolis_hastings(data, iterations, initial_shape, initial_rate, proposal_sd)
plot(result$shape[1:8000], type = 'l')
dev.off()
plot(result$shape[1:8000], type = 'l', xlab = "iteration", ylab = expression(alpha), cex.lab = 2, cex.axis = 2)
plot(result$shape[1:10000], type = 'l', xlab = "iteration", ylab = expression(alpha), cex.lab = 2, cex.axis = 2)
plot(result$shape[1:20000], type = 'l', xlab = "iteration", ylab = expression(alpha), cex.lab = 2, cex.axis = 2)
getwd()
library(RCurl)
install.packages("RCurl")
library(RCurl)
x <- getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
x <- getURL("https://github.com/ianjones/CJ_Users_Day_Meeting/blob/main/comparison_data/Bisson2016_algebra.csv")
x
comparisons <- read.csv(text = comparisons)
comparisons <- getURL("https://github.com/ianjones/CJ_Users_Day_Meeting/blob/main/comparison_data/Bisson2016_algebra.csv")
comparisons <- read.csv(text = comparisons)
comparisons
comparisons <- getURL("https://github.com/ianjones/CJ_Users_Day_Meeting/blob/main/comparison_data/Bramley2018_1a.csv")
comparisons <- read.csv(text = comparisons)
comparisons <- getURL("https://github.com/ianjones/CJ_Users_Day_Meeting/blob/main/comparison_data/AlMaimani2017.csv")
comparisons <- read.csv(text = comparisons)
comparisons
comparisons <- getURL("https://raw.githubusercontent.com/ianjones/CJ_Users_Day_Meeting/main/comparison_data/AlMaimani2017.csv?token=GHSAT0AAAAAACMTQC65YZAUI64TH2ZBW2WSZM7ZAFA")
comparisons <- read.csv(text = comparisons)
comparisons
gamma
qgamma(c(0.025, 0.975), 502, 870.01)
11/95.01
