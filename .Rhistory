f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y)
lines(x.star, f1, type = 'l', xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
k.star.chol <- chol(k.star)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 1)
k.x.star.x <- sq.exp(x.star, x, 10, 1)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y)
lines(x.star, f1, type = 'l', xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
plot(x, y)
lines(x.star, f1, type = 'l', xlab = "x", ylab = "f(x)", ylim = c(0, 15))
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x <- -5:5
sigma <- 0.3
y <- 3*sin(x/2)^2 + 3*exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
x <- -5:5
sigma <- 0.3
y <- sin(x/2)^2 + exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
x <- -5:5
sigma <- 0.2
y <- sin(x/2)^2 + exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
sq.exp <- function(x,
y,
alpha,
ell) {
#Calculate the Covariance Matrix with the covariance function of squared exponential
#INPUTS: x, y -- data points, alpha -- vertical scale parameter, ell -- horizontal scale
##OUTPUTS: covar -- length(x)*length(y) covariance matrix
covar <- matrix(rep(0, length(x) * length(y)), nrow = length(x)) # Initialise Empty Covariance Matrix
for (i in 1:length(x)) {
for (j in 1:length(y))
covar[i, j] <- alpha ^ 2 * exp(-(x[i] - y[j]) ^ 2 / ell ^ 2)
}
return(covar)
}
mvnorm.chol <- function(mu, chol){
#Multivariate Normal Sampler with Cholesky Input
#Inputs: mu -- mean, chol -- cholesky decomposition of variance matrix (may need transposing)
return(mu + t(chol)%*%rnorm(length(mu)))
}
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 10, 2)
k.x.star.x <- sq.exp(x.star, x, 10, 2)
k.x.x.star <- sq.exp(x, x.star, 10, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 5, 2)
k.x.star.x <- sq.exp(x.star, x, 5, 2)
k.x.x.star <- sq.exp(x, x.star, 5, 2)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.1*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 12))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
k.star.chol <- chol(k.star + 0.01*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
k.star.chol <- chol(k.star + 0.001*diag(length(x.star)))
k.star.chol <- chol(k.star + 0.00001*diag(length(x.star)))
k.star.chol <- chol(k.star + 0.0000001*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x <- -5:5
sigma <- 0.2
y <- sin(x/2)^2 + exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 5, 2)
k.x.star.x <- sq.exp(x.star, x, 5, 2)
k.x.x.star <- sq.exp(x, x.star, 5, 2)
k.x.star.x.star <- sq.exp(x.star, x.star, 10, 2)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.0000001*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 5, 1)
k.x.star.x <- sq.exp(x.star, x, 5, 1)
k.x.x.star <- sq.exp(x, x.star, 5, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 5, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.0000001*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 5, 1)
k.x.star.x <- sq.exp(x.star, x, 5, 1)
k.x.x.star <- sq.exp(x, x.star, 5, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 5, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.0000001*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
x <- -5:5
sigma <- 0.1
y <- sin(x/2)^2 + exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
sq.exp <- function(x,
y,
alpha,
ell) {
#Calculate the Covariance Matrix with the covariance function of squared exponential
#INPUTS: x, y -- data points, alpha -- vertical scale parameter, ell -- horizontal scale
##OUTPUTS: covar -- length(x)*length(y) covariance matrix
covar <- matrix(rep(0, length(x) * length(y)), nrow = length(x)) # Initialise Empty Covariance Matrix
for (i in 1:length(x)) {
for (j in 1:length(y))
covar[i, j] <- alpha ^ 2 * exp(-(x[i] - y[j]) ^ 2 / ell ^ 2)
}
return(covar)
}
mvnorm.chol <- function(mu, chol){
#Multivariate Normal Sampler with Cholesky Input
#Inputs: mu -- mean, chol -- cholesky decomposition of variance matrix (may need transposing)
return(mu + t(chol)%*%rnorm(length(mu)))
}
x.star <- seq(-5, 5, 0.1)
k.x.x      <- sq.exp(x, x, 5, 1)
k.x.star.x <- sq.exp(x.star, x, 5, 1)
k.x.x.star <- sq.exp(x, x.star, 5, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 5, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.0000001*diag(length(x.star)))
f1 <- mvnorm.chol(mu.star, k.chol)
f2 <- mvnorm.chol(mu.star, k.chol)
f3 <- mvnorm.chol(mu.star, k.chol)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, f1, type = 'l')
lines(x.star, f2, lty = 2)
lines(x.star, f3, lty = 3)
lines(x.star, mu.star,col = 2)
f.matrix <- matrix(NA, length(x.star), 1000)
for(j in 1:1000)
f.matrix[i, ] <- mvnorm.chol(mu.star, k.chol)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
for(j in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
f.upper <- apply(f.matrix, 2, quantile, 0.975)
f.lower <- apply(f.matrix, 2, quantile, 0.025)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 0, 1, 0.25), bty = "N")
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 0, 1, 0.25), bty = "N")
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 0, 1, 0.25), border = FALSE)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
line(x, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
line(x, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
line(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
line(x.star, mu.star)
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
k.star.chol <- chol(k.star + 0.0000000001*diag(length(x.star)))
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 0.0000000001*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
k.star.chol <- chol(k.star + 1e-15*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
k.star.chol <- chol(k.star + 1e-16*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
k.star.chol <- chol(k.star + 1e-15*diag(length(x.star)))
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
x.star <- seq(-5, 5, 0.01)
k.x.x      <- sq.exp(x, x, 5, 1)
k.x.star.x <- sq.exp(x.star, x, 5, 1)
k.x.x.star <- sq.exp(x, x.star, 5, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 5, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.chol)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
length(x.star)
length(mu.star)
dim(k.star)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix[, i] <- mvnorm.chol(mu.star, k.star.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.star.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
x.star <- seq(-5, 5, 0.01)
k.x.x      <- sq.exp(x, x, 1, 1)
k.x.star.x <- sq.exp(x.star, x, 1, 1)
k.x.x.star <- sq.exp(x, x.star, 1, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 1, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.star.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(-2, 5))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 4))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
x <- -5:5
sigma <- 0.2
y <- sin(x/2)^2 + exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
sq.exp <- function(x,
y,
alpha,
ell) {
#Calculate the Covariance Matrix with the covariance function of squared exponential
#INPUTS: x, y -- data points, alpha -- vertical scale parameter, ell -- horizontal scale
##OUTPUTS: covar -- length(x)*length(y) covariance matrix
covar <- matrix(rep(0, length(x) * length(y)), nrow = length(x)) # Initialise Empty Covariance Matrix
for (i in 1:length(x)) {
for (j in 1:length(y))
covar[i, j] <- alpha ^ 2 * exp(-(x[i] - y[j]) ^ 2 / ell ^ 2)
}
return(covar)
}
mvnorm.chol <- function(mu, chol){
#Multivariate Normal Sampler with Cholesky Input
#Inputs: mu -- mean, chol -- cholesky decomposition of variance matrix (may need transposing)
return(mu + t(chol)%*%rnorm(length(mu)))
}
x.star <- seq(-5, 5, 0.01)
k.x.x      <- sq.exp(x, x, 1, 1)
k.x.star.x <- sq.exp(x.star, x, 1, 1)
k.x.x.star <- sq.exp(x, x.star, 1, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 1, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.star.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 4))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
rm(list = ls())
x <- -5:5
sigma <- 0.2
y <- sin(x/2)^2 + exp(-x/5) + rnorm(length(x), 0, sigma)
plot(x, y)
sq.exp <- function(x,
y,
alpha,
ell) {
#Calculate the Covariance Matrix with the covariance function of squared exponential
#INPUTS: x, y -- data points, alpha -- vertical scale parameter, ell -- horizontal scale
##OUTPUTS: covar -- length(x)*length(y) covariance matrix
covar <- matrix(rep(0, length(x) * length(y)), nrow = length(x)) # Initialise Empty Covariance Matrix
for (i in 1:length(x)) {
for (j in 1:length(y))
covar[i, j] <- alpha ^ 2 * exp(-(x[i] - y[j]) ^ 2 / ell ^ 2)
}
return(covar)
}
mvnorm.chol <- function(mu, chol){
#Multivariate Normal Sampler with Cholesky Input
#Inputs: mu -- mean, chol -- cholesky decomposition of variance matrix (may need transposing)
return(mu + t(chol)%*%rnorm(length(mu)))
}
x.star <- seq(-5, 5, 0.01)
k.x.x      <- sq.exp(x, x, 1, 1)
k.x.star.x <- sq.exp(x.star, x, 1, 1)
k.x.x.star <- sq.exp(x, x.star, 1, 1)
k.x.star.x.star <- sq.exp(x.star, x.star, 1, 1)
mu.star <- k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%y
k.star  <- k.x.star.x.star - k.x.star.x%*%solve(k.x.x + sigma^2*diag(length(x)))%*%t(k.x.star.x)
k.star.chol <- chol(k.star + 1e-13*diag(length(x.star)))
f.matrix <- matrix(NA, length(x.star), 1000)
for(i in 1:1000)
f.matrix[, i] <- mvnorm.chol(mu.star, k.star.chol)
f.upper <- apply(f.matrix, 1, quantile, 0.975)
f.lower <- apply(f.matrix, 1, quantile, 0.025)
plot(x, y, xlab = "x", ylab = "f(x)", ylim = c(0, 4))
lines(x.star, mu.star)
polygon(c(x.star, rev(x.star)), c(f.lower, rev(f.upper)), col = rgb(0,0, 1, 0.25), border = FALSE)
