x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 30
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- rexp(5, 0.3)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 1
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- rexp(5, 0.3)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 3
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 5
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 10
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 20
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 50
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 60
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 70
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Get number of reject samples
sum(is.na(lambda.store))
#Plot Approximate Posterior
hist(lambda.store, freq = FALSE, xlab = expression(sigma^2), main = "")
mean(lambda.store, na.rm = TRUE)
quantile(lambda.store, c(0.025, 0.975), na.rm = TRUE)
abs.function <- function(epsilon){
for(i in 1:n.iter){
lambda <-rbeta(1, 3, 1)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
output(mean(lambda.store))
}
mean(x)
1/mean(x)
abc.function <- function(epsilon){
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
output(mean(lambda.store))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
epsilon <- 70
abc.function <- function(epsilon){
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
return(mean(lambda.store))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
plot(abc.lambda)
abc.lambda
abc.function(i)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
epsilon <- 70
abc.function <- function(epsilon){
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
return(mean(lambda.store))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
hist(lambda.store)
mean(lambda.store)
epsilon <- 70
abc.function <- function(epsilon){
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
for(i in 1:n.iter){
lambda <-rbeta(1, 1, 3)
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
return(mean(lambda.store, na.rm = TRUE))
}
abc.lambda <- numeric(51)
for(i in 50:100){
abc.lambda[i-49] <- abc.function(i)
}
plot(abc.lambda)
plot((abc.lambda - 0.2)/0.2)
plot((abc.lambda - 0.2)/0.2*100)
for(i in 20:100){
abc.lambda[i-49] <- abc.function(i)
}
epsilon <- 20:100
abc.lambda <- numeric(length(epsilon))
for(i in 1:length(epsilon))
abc.lambda[i] <- abc.function(i)
plot((abc.lambda - 0.2)/0.2*100)
# Set Up ABC function -----------------------------------------------------
abc.function <- function(epsilon){
#input the value of epsilon
#Set Up ABC Algorithm
x <- c(2.6863422, 8.8468112, 8.8781831, 0.2712696, 1.8902442)
n.iter <- 50000
lambda.store <- numeric(n.iter)
#Run ABC
for(i in 1:n.iter){
#Propose lambda
lambda <-rbeta(1, 1, 3)
#Simulate data
x.star <- rexp(5, lambda)
d <- sum((x-x.star)^2)
#Accept Reject
if(d < epsilon){
lambda.store[i] <- lambda
} else{
lambda.store[i] <- NA
}
}
#Report median
return(median(lambda.store, na.rm = TRUE))
}
#Run for each value of epsilon
epsilon <- 20:100
abc.lambda <- numeric(length(epsilon))
for(i in 1:length(epsilon))
abc.lambda[i] <- abc.function(i)
#Report relative error
plot((abc.lambda - 0.2)/0.2*100)
#Report relative error
plot(epsilon, (abc.lambda - 0.2)/0.2*100, xlab = expression(epsilon), ylab = "Relative Error")
install.packages(mvtnomr)
install.packages(mvtnorm)
install.packages("mvtnorm")
a <- seq(0.5, 1, 0.001)
x <- dbinorm(a, 1000, 0.9)
a <- seq(0.5, 1, 0.001)
x <- dbinom(a, 1000, 0.9)
y <-  dbinrm(a, 1000, 0.8)
y <-  dbinom(a, 1000, 0.8)
plot(a, x, type = 'l', ylim = c(0, 20), xlab = expression(y),
ylab = "density")
warnings()
a <- 1:1000
x <- dbinom(a, 1000, 0.9)
y <-  dbinom(a, 1000, 0.8)
plot(a, x, type = 'l', ylim = c(0, 20), xlab = expression(y),
ylab = "density")
x
y
plot(a, x, type = 'l', xlab = expression(y),
ylab = "density")
lines(a, y, lty = 2)
y <-  dbinom(a, 1000, 0.85)
plot(a, x, type = 'l', xlab = expression(y),
ylab = "density")
lines(a, y, lty = 2)
a <- 1:1000
x <- dbinom(a, 1000, 0.9)
y <-  dbinom(a, 1000, 0.875)
plot(a, x, type = 'l', xlab = expression(y),
ylab = "density")
lines(a, y, lty = 2)
plot(a, x, type = 'l', xlab = expression(y),
ylab = "density", xlab = c(800, 1000))
lines(a, y, lty = 2)
plot(a, x, type = 'l', xlab = expression(y),
ylab = "density", xlim = c(800, 1000))
lines(a, y, lty = 2)
7+4+3+1
rgeom(1, 0.4)
rgeom(1, 0.4) + rgeom(2, 0.4)
rgeom(3, 0.4)
rgeom(20, 0.4)
rgeom(20, 0.9)
rgeom(20, 0.9)
rgeom(20, 0.25)
table(rgeom(20, 0.25))
table(rgeom(20, 0.25) + 1)
table(rgeom(20, 0.1) + 1)
table(rgeom(20, 0.5) + 1)
table(rgeom(20, 0.5) + 1)
value <- pgamma(0.9, 2*b, b)-0.9
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 2*b, b)-0.9
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 10)
uniroot(cummulative.eqn, lower = 0, upper = 10)
uniroot(cummulative.eqn, lower = 0, upper = 100)
uniroot(cummulative.eqn, lower = 0, upper = 1000)
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 2*b, b)-0.0001
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 2*b, b)-0.0001
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
?optim
optim(10, cummulative.eqn)
optim(10, cummulative.eqn, method = "Brent")
optim(10, cummulative.eqn, method = "Brent", , lower = 1, upper = 1000)
optim(10, cummulative.eqn, method = "Brent", lower = 1, upper = 1000)
optim(14, cummulative.eqn, method = "Brent", lower = 1, upper = 1000)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr)
(res <- optim(c(-1.2,1), fr, grr, method = "BFGS"))
uniroot(cummulative.eqn, lower = 1, upper = 1000)
optim(14, cummulative.eqn, method = "Brent", lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 2*b, b)-0.9999
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 8*b, b)-0.9999
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 8*b, b)-0.0001
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.99, 8*b, b)-0.0001
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
pgamma(0.99,7, 10)
pgamma(0.8,7, 10)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.8, 0.7*b, b)-0.7
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
pgamma(0.8, 0.7*13, 13)
uniroot(cummulative.eqn, lower = 1, upper = 1000)
0.75*13.2
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.7, 0.75*b, b)-0.8
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.7, 0.75*b, b)-0.8
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn(1)
cummulative.eqn(2)
cummulative.eqn(100)
#Compute equation with value beta = b
value <- pgamma(0.6, 0.75*b, b)-0.8
return(value)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.6, 0.75*b, b)-0.8
return(value)
}
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.6, 0.75*b, b)-0.8
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
cummulative.eqn <- function(b){
#Compute equation with value beta = b
value <- pgamma(0.9, 0.75*b, b)-0.8
return(value)
}
uniroot(cummulative.eqn, lower = 1, upper = 1000)
0.745
0.75*21.8
